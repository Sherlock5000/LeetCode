## 2-pass Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        
        if not head:
            return None
        
        if not head.next:
            return
        
        p = head
        count = 0
        
        while p:
            count += 1
            p = p.next
            
        if count == n:
            return head.next
        
        k = count - n
        q = head
        count2 = 0
        
        for i in range(0, k):
            count2 += 1
            if count2 != k:
                q = q.next
            else:
                q.next = q.next.next
                
        return head

## 1-pass Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        if not head:
            return None
        
        if not head.next:
            return 
        
        fast, slow = head, head
        
        for _ in range(0, n):
            fast = fast.next
            
        if not fast:
            return head.next
        
        while fast.next:
            fast = fast.next
            slow = slow.next
            
        slow.next = slow.next.next
        
        return head
