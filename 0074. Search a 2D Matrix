# Solution 1
# Time complexity: O(m + n)
# Space complexity: O(1)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or len(matrix) == 0 or matrix == [[]]:
            return False
        
        if target < matrix[0][0] or target > matrix[-1][-1]:
            return False
        
        height = len(matrix)
        width = len(matrix[0])
        
        row = height - 1
        col = 0
        
        while col < width and row >= 0:
            if target < matrix[row][col]:
                row -= 1
                
            elif target > matrix[row][col]:
                col += 1
                
            else:
                return True
            
        return False

# Solution 2
# Time complexity: O(log(mn))
# Space complexity: O(1)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or len(matrix) == 0 or matrix == [[]]:
            return False
        
        if target < matrix[0][0] or target > matrix[-1][-1]:
            return False
        
        left = 0
        right = len(matrix) * len(matrix[0]) - 1
        
        while left <= right:
            mid = (left + right) // 2
            pivot = matrix[mid // len(matrix[0])][mid % len(matrix[0])]
            
            if target == pivot:
                return True
            
            elif target > pivot:
                left = mid + 1
                
            else:
                right = mid - 1
                
        return False
