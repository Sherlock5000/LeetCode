# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        while root:
            if root.val == val:
                return root
            elif root.val < val:
                root = root.right
            else:
                root = root.left
                
# Solution 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        if root == None:
            return None
        
        if root.val == val:
            return root
        
        node1 = self.searchBST(root.left, val)
        
        if node1 == None:
            node2 = self.searchBST(root.right, val)
        
        if node1 == None and node2 == None:
            return None
        elif node1 == None:
            return node2
        else:
            return node1
