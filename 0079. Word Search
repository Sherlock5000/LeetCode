class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        def dfs(i, j , word):
            if word == '':
                return True
            
            if i < 0 or j < 0 or i >= m or j >= n:
                return False
            
            if board[i][j] != word[0]:
                return False
            
            if visited[i][j]:
                return False
            
            visited[i][j] = 1
            
            if dfs(i + 1, j , word[1:]) or dfs(i - 1, j, word[1:]) or dfs(i, j + 1, word[1:]) or dfs(i, j - 1, word[1:]):
                return True
            
            visited[i][j] = 0
            
            return False
        
        m, n = len(board), len(board[0])
        visited = [[0] * n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if dfs(i, j, word):
                    return True
                
        return False
