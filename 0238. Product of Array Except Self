# Time Complexity: O(n), Space Complexity: O(1)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        answer = [0] * len(nums)
        answer[0] = 1
        
        for i in range(1, len(nums)):
            answer[i] = answer[i - 1] * nums[i - 1]
            
        R = 1
        
        for i in range(len(nums) - 1, - 1, -1):
            answer[i] = answer[i] * R
            R = R * nums[i]
            
        return answer

# Time Complexity: O(n), Space Complexity: O(n)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        answer = [0] * len(nums)
        L = [0] * len(nums)
        R = [0] * len(nums)
        
        L[0] = 1
        R[len(nums) - 1] = 1
        
        for i in range(1, len(nums)):
            L[i] = L[i - 1] * nums[i - 1]
            
        for i in range(len(nums) - 2, -1, -1):
            R[i] = R[i + 1] * nums[i + 1]
            
        for i in range(len(nums)):
            answer[i] = L[i] * R[i]
            
        return answer
