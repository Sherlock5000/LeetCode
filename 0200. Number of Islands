# Python Solution

class Solution:
    def dfs(self, grid, row, col) :
        r = len(grid)
        c = len(grid[0])
        
        if row < 0 or col < 0 or row >= r or col >= c or grid[row][col] == '0':
            return
        
        grid[row][col] = '0'
        self.dfs(grid, row - 1, col)
        self.dfs(grid, row + 1, col)
        self.dfs(grid, row, col - 1)
        self.dfs(grid, row, col + 1)
        
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or len(grid) == 0:
            return 0
        
        islands = 0
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    islands += 1
                    self.dfs(grid, i, j)
                    
        return islands

# Java Solution

class Solution {
    public void dfs(char[][] grid, int row, int col) {
        int r = grid.length;
        int c = grid[0].length;
        
        if(row < 0 || col < 0 || row >= r || col >= c || grid[row][col] == '0') {
            return;
        }
        
        grid[row][col] = '0';
        dfs(grid, row - 1, col);
        dfs(grid, row + 1, col);
        dfs(grid, row, col - 1);
        dfs(grid, row, col + 1);
    }
    
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) {
            return 0;
        }
        
        int islands = 0;
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == '1') {
                    islands++;
                    dfs(grid, i, j);
                }
            }
        }
        return islands;
    }
}
