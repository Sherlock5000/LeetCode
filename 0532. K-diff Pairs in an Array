Two Pointer Solution

class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        
        int left = 0;
        int right = 1;
        int result = 0;
        
        while(left < nums.length && right < nums.length) {
            if(nums[right] - nums[left] < k || left == right) {
                right++;
            }
            else if(nums[right] - nums[left] > k) {
                left++;
            }
            else {
                result++;
                left++;
                while(left < nums.length && nums[left] == nums[left - 1]) {
                    left++;
                }
            }
        }
        return result;
    }
}

Hashmap Solution

class Solution {
    public int findPairs(int[] nums, int k) {
        int result = 0;
        
        HashMap<Integer, Integer> counter = new HashMap<>();
        
        for(int n : nums) {
            counter.put(n, counter.getOrDefault(n, 0) + 1);
        }
        
        for(Map.Entry<Integer, Integer> entry : counter.entrySet()) {
            int x = entry.getKey();
            int val = entry.getValue();
            
            if(k > 0 && counter.containsKey(x + k)) {
                result++;
            }
            else if(k == 0 && val > 1) {
                result++;
            }
        }
        return result;
    }
}
